{"ast":null,"code":"var _jsxFileName = \"/Users/gua/Desktop/tea-shop/src/components/events/CardList.jsx\";\nimport React from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport styled from 'styled-components';\nimport EventCard from './EventCard';\nimport { connect } from 'react-redux';\nconst Title = styled.h2`\n  &:before {\n    display: inline-block;\n    content: '';\n    width: 17px;\n    height: 17px;\n    margin-right: 0.5rem;\n    padding: 2px;\n    border: 1px solid #df641cba;\n    border-radius: 50%;\n    background: #df641cba;\n    background-clip: content-box;\n  }\n`;\n\nfunction CardList({\n  events = [],\n  title = ''\n}) {\n  const mapEvents = data => {\n    return data.map(event => {\n      return /*#__PURE__*/React.createElement(Col, {\n        key: event.id,\n        md: \"4\",\n        className: \"mb-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(EventCard, Object.assign({}, event, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }\n      })));\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, title ? /*#__PURE__*/React.createElement(Title, {\n    className: \"h4 mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 16\n    }\n  }, title) : null, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, mapEvents(events)));\n}\n\nconst mapStateToProps = ({\n  events: eventsData,\n  zones\n}) => {\n  let {\n    filterType,\n    filterId,\n    filterName,\n    data: events\n  } = eventsData;\n\n  if (filterType === 'zone') {\n    const zone = zones.find(zone => zone.zId.toString() === filterId.toString());\n    const companysId = zone.companys.map(company => company.id);\n    events = events.filter(event => companysId.includes(event.cId));\n    return {\n      events,\n      title: `${filterName}部`\n    };\n  } else if (filterType === 'vendor') {\n    events = events.filter(event => event.cId.toString() === filterId.toString());\n    return {\n      events,\n      title: filterName\n    };\n  } else {\n    return {\n      events,\n      title: filterName\n    };\n  }\n};\n\nexport default connect(mapStateToProps)(CardList);","map":{"version":3,"sources":["/Users/gua/Desktop/tea-shop/src/components/events/CardList.jsx"],"names":["React","Row","Col","styled","EventCard","connect","Title","h2","CardList","events","title","mapEvents","data","map","event","id","mapStateToProps","eventsData","zones","filterType","filterId","filterName","zone","find","zId","toString","companysId","companys","company","filter","includes","cId"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,GAAd,QAAyB,iBAAzB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,MAAMC,KAAK,GAAGH,MAAM,CAACI,EAAG;;;;;;;;;;;;;CAAxB;;AAeA,SAASC,QAAT,CAAkB;AAAEC,EAAAA,MAAM,GAAG,EAAX;AAAeC,EAAAA,KAAK,GAAG;AAAvB,CAAlB,EAA+C;AAC7C,QAAMC,SAAS,GAAGC,IAAI,IAAI;AACxB,WAAOA,IAAI,CAACC,GAAL,CAASC,KAAK,IAAI;AACvB,0BACE,oBAAC,GAAD;AAAK,QAAA,GAAG,EAAEA,KAAK,CAACC,EAAhB;AAAoB,QAAA,EAAE,EAAC,GAAvB;AAA2B,QAAA,SAAS,EAAC,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD,oBAAeD,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADF,CADF;AAKD,KANM,CAAP;AAOD,GARD;;AASA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,KAAK,gBAAG,oBAAC,KAAD;AAAO,IAAA,SAAS,EAAC,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BA,KAA5B,CAAH,GAAgD,IADxD,eAEE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMC,SAAS,CAACF,MAAD,CAAf,CAFF,CADF;AAMD;;AAED,MAAMO,eAAe,GAAG,CAAC;AAAEP,EAAAA,MAAM,EAAEQ,UAAV;AAAsBC,EAAAA;AAAtB,CAAD,KAAmC;AACzD,MAAI;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,QAAd;AAAwBC,IAAAA,UAAxB;AAAoCT,IAAAA,IAAI,EAAEH;AAA1C,MAAqDQ,UAAzD;;AACA,MAAIE,UAAU,KAAK,MAAnB,EAA2B;AACzB,UAAMG,IAAI,GAAGJ,KAAK,CAACK,IAAN,CAAWD,IAAI,IAAIA,IAAI,CAACE,GAAL,CAASC,QAAT,OAAwBL,QAAQ,CAACK,QAAT,EAA3C,CAAb;AACA,UAAMC,UAAU,GAAGJ,IAAI,CAACK,QAAL,CAAcd,GAAd,CAAkBe,OAAO,IAAIA,OAAO,CAACb,EAArC,CAAnB;AACAN,IAAAA,MAAM,GAAGA,MAAM,CAACoB,MAAP,CAAcf,KAAK,IAAIY,UAAU,CAACI,QAAX,CAAoBhB,KAAK,CAACiB,GAA1B,CAAvB,CAAT;AACA,WAAO;AAAEtB,MAAAA,MAAF;AAAUC,MAAAA,KAAK,EAAG,GAAEW,UAAW;AAA/B,KAAP;AACD,GALD,MAKO,IAAIF,UAAU,KAAK,QAAnB,EAA6B;AAClCV,IAAAA,MAAM,GAAGA,MAAM,CAACoB,MAAP,CAAcf,KAAK,IAAIA,KAAK,CAACiB,GAAN,CAAUN,QAAV,OAAyBL,QAAQ,CAACK,QAAT,EAAhD,CAAT;AACA,WAAO;AAAEhB,MAAAA,MAAF;AAAUC,MAAAA,KAAK,EAAEW;AAAjB,KAAP;AACD,GAHM,MAGA;AACL,WAAO;AAAEZ,MAAAA,MAAF;AAAUC,MAAAA,KAAK,EAAEW;AAAjB,KAAP;AACD;AACF,CAbD;;AAeA,eAAehB,OAAO,CAACW,eAAD,CAAP,CAAyBR,QAAzB,CAAf","sourcesContent":["import React from 'react'\nimport { Row, Col } from 'react-bootstrap'\nimport styled from 'styled-components'\nimport EventCard from './EventCard'\nimport { connect } from 'react-redux'\n\nconst Title = styled.h2`\n  &:before {\n    display: inline-block;\n    content: '';\n    width: 17px;\n    height: 17px;\n    margin-right: 0.5rem;\n    padding: 2px;\n    border: 1px solid #df641cba;\n    border-radius: 50%;\n    background: #df641cba;\n    background-clip: content-box;\n  }\n`\n\nfunction CardList({ events = [], title = '' }) {\n  const mapEvents = data => {\n    return data.map(event => {\n      return (\n        <Col key={event.id} md=\"4\" className=\"mb-5\">\n          <EventCard {...event} />\n        </Col>\n      )\n    })\n  }\n  return (\n    <section>\n      {title ? <Title className=\"h4 mb-4\">{title}</Title> : null}\n      <Row>{mapEvents(events)}</Row>\n    </section>\n  )\n}\n\nconst mapStateToProps = ({ events: eventsData, zones }) => {\n  let { filterType, filterId, filterName, data: events } = eventsData\n  if (filterType === 'zone') {\n    const zone = zones.find(zone => zone.zId.toString() === filterId.toString())\n    const companysId = zone.companys.map(company => company.id)\n    events = events.filter(event => companysId.includes(event.cId))\n    return { events, title: `${filterName}部` }\n  } else if (filterType === 'vendor') {\n    events = events.filter(event => event.cId.toString() === filterId.toString())\n    return { events, title: filterName }\n  } else {\n    return { events, title: filterName }\n  }\n}\n\nexport default connect(mapStateToProps)(CardList)\n"]},"metadata":{},"sourceType":"module"}