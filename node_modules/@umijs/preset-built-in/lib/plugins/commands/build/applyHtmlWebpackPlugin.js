"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

var _htmlUtils = require("../htmlUtils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _default(api) {
  class HtmlWebpackPlugin {
    apply(compiler) {
      compiler.hooks.emit.tapPromise('UmiHtmlGeneration', /*#__PURE__*/function () {
        var _ref = _asyncToGenerator(function* (compilation) {
          const html = (0, _htmlUtils.getHtmlGenerator)({
            api
          });
          const routeMap = api.config.exportStatic ? yield html.getRouteMap() : [{
            route: {
              path: '/'
            },
            file: 'index.html'
          }];
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = routeMap[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              const _step$value = _step.value,
                    route = _step$value.route,
                    file = _step$value.file;
              const content = yield html.getContent({
                route,
                chunks: compilation.chunks
              });
              compilation.assets[file] = {
                source: () => content,
                size: () => content.length
              };
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          return true;
        });

        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }());
    }

  }

  api.modifyBundleConfig((bundleConfig, {
    env,
    bundler: {
      id
    }
  }) => {
    if (env === 'production' && id === 'webpack' && process.env.HTML !== 'none') {
      var _bundleConfig$plugins;

      (_bundleConfig$plugins = bundleConfig.plugins) === null || _bundleConfig$plugins === void 0 ? void 0 : _bundleConfig$plugins.unshift(new HtmlWebpackPlugin());
    }

    return bundleConfig;
  });
}