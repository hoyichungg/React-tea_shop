"use strict";

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _sockjsClient() {
  const data = _interopRequireDefault(require("sockjs-client"));

  _sockjsClient = function _sockjsClient() {
    return data;
  };

  return data;
}

function _url() {
  const data = _interopRequireDefault(require("url"));

  _url = function _url() {
    return data;
  };

  return data;
}

var _handlers = require("./handlers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let sock;
let retries = 0;
let pending;

const getSocketHost = () => {
  var _document$body, _document$body$queryS;

  const scripts = ((_document$body = document.body) === null || _document$body === void 0 ? void 0 : (_document$body$queryS = _document$body.querySelectorAll) === null || _document$body$queryS === void 0 ? void 0 : _document$body$queryS.call(_document$body, 'script')) || [];
  const dataFromSrc = scripts[scripts.length - 1] ? scripts[scripts.length - 1].getAttribute('src') : '';
  let host, protocol;

  if (dataFromSrc && dataFromSrc.includes('umi.js')) {
    const urlParsed = _url().default.parse(dataFromSrc);

    host = urlParsed.host;
    protocol = urlParsed.protocol;
  } else {
    // 某些场景可能没有 umi.js，比如微前端的场景
    host = location.host;
    protocol = location.protocol;
  }

  return host && protocol ? _url().default.format({
    host,
    protocol
  }) : '';
};

const initSocket = () => {
  const host = getSocketHost();
  sock = new (_sockjsClient().default)(`${host}/dev-server`);

  sock.onopen = () => {
    var _pending, _pending$parentElemen;

    retries = 0;
    (_pending = pending) === null || _pending === void 0 ? void 0 : (_pending$parentElemen = _pending.parentElement) === null || _pending$parentElemen === void 0 ? void 0 : _pending$parentElemen.removeChild(pending);
  };

  sock.onmessage = e => {
    const message = JSON.parse(e.data);

    switch (message.type) {
      case 'hash':
        (0, _handlers.handleHashChange)(message.data);
        break;

      case 'still-ok':
      case 'ok':
        (0, _handlers.handleSuccess)();
        break;

      case 'warnings':
        (0, _handlers.handleWarnings)(message.data);
        break;

      case 'errors':
        (0, _handlers.handleErrors)(message.data);
        break;

      default:
        break;
    }
  };

  sock.onclose = e => {
    if (retries === 0) {
      var _console;

      if (typeof ((_console = console) === null || _console === void 0 ? void 0 : _console.info) === 'function') {
        console.info('The development server has disconnected.\nRefresh the page if necessary.');
      }
    } // @ts-ignore


    sock = null;

    if (!pending) {
      pending = (0, _handlers.showPending)();
    }

    if (retries <= 10) {
      const retryInMs = 1000 * Math.pow(2, retries) + Math.random() * 100;
      retries += 1;
      setTimeout(() => {
        initSocket();
      }, retryInMs);
    }
  };
};

initSocket();