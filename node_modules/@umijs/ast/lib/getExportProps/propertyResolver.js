"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RESOLVABLE_WHITELIST = void 0;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _utils() {
  const data = require("@umijs/utils");

  _utils = function _utils() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const StringResolver = {
  is(src) {
    return _utils().t.isStringLiteral(src);
  },

  get(src) {
    return src.value;
  }

};
const NumberResolver = {
  is(src) {
    return _utils().t.isNumericLiteral(src);
  },

  get(src) {
    return src.value;
  }

};
const BooleanResolver = {
  is(src) {
    return _utils().t.isBooleanLiteral(src);
  },

  get(src) {
    return src.value;
  }

};
const NullResolver = {
  is(src) {
    return _utils().t.isNullLiteral(src);
  },

  get(src) {
    return null;
  }

};
const UndefinedResolver = {
  is(src) {
    return _utils().t.isIdentifier(src) && src.name === 'undefined';
  },

  get(src) {
    return undefined;
  }

};
const ObjectResolver = {
  is(src) {
    return _utils().t.isObjectExpression(src);
  },

  get(src) {
    return findObjectProperties(src);
  }

};
const ArrayResolver = {
  is(src) {
    return _utils().t.isArrayExpression(src);
  },

  get(src) {
    return findArrayProperties(src);
  }

};
const RESOLVABLE_WHITELIST = [StringResolver, NumberResolver, BooleanResolver, NullResolver, UndefinedResolver, ObjectResolver, ArrayResolver];
exports.RESOLVABLE_WHITELIST = RESOLVABLE_WHITELIST;

function findObjectProperties(node) {
  const target = {};
  node.properties.forEach(p => {
    if (_utils().t.isObjectProperty(p) && _utils().t.isIdentifier(p.key)) {
      const resolver = RESOLVABLE_WHITELIST.find(resolver => resolver.is(p.value));

      if (resolver) {
        target[p.key.name] = resolver.get(p.value);
      }
    }
  });
  return target;
}

function findArrayProperties(node) {
  const target = [];
  node.elements.forEach(p => {
    const resolver = RESOLVABLE_WHITELIST.find(resolver => resolver.is(p));

    if (resolver) {
      target.push(resolver.get(p));
    }
  });
  return target;
}